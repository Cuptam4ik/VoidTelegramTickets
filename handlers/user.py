from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
import aiosqlite
import logging
from config import ADMIN_IDS, SUPPORT_GROUP_ID
from keyboards import get_user_keyboard, get_back_keyboard, get_category_keyboard, get_priority_keyboard, get_done_keyboard, get_inline_back_keyboard, get_chat_back_keyboard
import re

router = Router()
logger = logging.getLogger(__name__)

class TicketCreation(StatesGroup):
    waiting_for_category = State()
    waiting_for_priority = State()
    waiting_for_nickname = State()
    waiting_for_description = State()
    waiting_for_evidence = State()

class UserChat(StatesGroup):
    chatting_with_admin = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if message.chat.id == SUPPORT_GROUP_ID:
        return
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    user_id = message.from_user.id
    is_admin = user_id in ADMIN_IDS
    
    welcome_text = "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ç–∏–∫–µ—Ç–æ–≤ Void!\n\n"
    if is_admin:
        welcome_text += "üë®‚Äçüíº –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n"
        welcome_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        welcome_text += "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤\n"
        welcome_text += "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏\n"
        welcome_text += "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        from keyboards import get_admin_keyboard
        await message.answer(welcome_text, reply_markup=get_admin_keyboard())
    else:
        welcome_text += "üéØ –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.\n"
        welcome_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        welcome_text += "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤\n"
        welcome_text += "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        await message.answer(welcome_text, reply_markup=get_user_keyboard())

@router.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç")
async def handle_create_ticket_button(message: Message, state: FSMContext):
    if message.chat.id == SUPPORT_GROUP_ID:
        return
    await create_ticket_start(message, state)

@router.message(F.text == "üìã –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def handle_admin_panel_button(message: Message):
    if message.chat.id == SUPPORT_GROUP_ID:
        return
    from handlers.admin import admin_panel
    await admin_panel(message)

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_statistics_button(message: Message):
    if message.chat.id == SUPPORT_GROUP_ID:
        return
    await message.answer("üìä –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

@router.callback_query(lambda c: c.data.startswith('cat_'))
async def process_category_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {callback.data}")
    await callback.answer()
    
    category = callback.data.split('_')[1]
    category_names = {
        'tech': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
        'report': '–ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞', 
        'payment': '–í–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ',
        'other': '–î—Ä—É–≥–æ–µ'
    }
    
    await state.update_data(category=category_names.get(category, '–î—Ä—É–≥–æ–µ'))
    await state.set_state(TicketCreation.waiting_for_priority)
    
    await callback.message.edit_text(
        f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_names.get(category, '–î—Ä—É–≥–æ–µ')}\n\n"
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
        reply_markup=get_priority_keyboard()
    )

@router.callback_query(lambda c: c.data.startswith('prio_'))
async def process_priority_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {callback.data}")
    await callback.answer()
    
    priority = callback.data.split('_')[1]
    priority_names = {
        'low': '–ù–∏–∑–∫–∏–π',
        'medium': '–°—Ä–µ–¥–Ω–∏–π',
        'high': '–í—ã—Å–æ–∫–∏–π'
    }
    
    await state.update_data(priority=priority_names.get(priority, '–°—Ä–µ–¥–Ω–∏–π'))
    await state.set_state(TicketCreation.waiting_for_nickname)
    await callback.message.edit_text(
        f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_names.get(priority, '–°—Ä–µ–¥–Ω–∏–π')}\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º:",
        reply_markup=get_inline_back_keyboard()
    )

@router.callback_query(lambda c: c.data == 'back_to_priority')
async def back_to_priority(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(TicketCreation.waiting_for_priority)
    await callback.message.edit_text(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
        reply_markup=get_priority_keyboard()
    )

@router.message(TicketCreation.waiting_for_nickname)
async def process_nickname(message: Message, state: FSMContext):
    if message.chat.id == SUPPORT_GROUP_ID:
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(TicketCreation.waiting_for_priority)
        await message.answer(
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
            reply_markup=get_priority_keyboard()
        )
        return

    nickname = message.text.strip()
    if len(nickname) < 3 or not re.fullmatch(r'[A-Za-z0-9_]+', nickname):
        await message.answer("‚ùó –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º:")
        return

    await state.update_data(nickname=nickname)
    await state.set_state(TicketCreation.waiting_for_description)
    await message.answer(
        "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:",
        reply_markup=get_back_keyboard()
    )

@router.message(TicketCreation.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞"""
    if message.chat.id == SUPPORT_GROUP_ID:
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(TicketCreation.waiting_for_priority)
        await message.answer(
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
            reply_markup=get_priority_keyboard()
        )
        return
    
    if len(message.text) < 10:
        await message.answer("‚ùó –ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤. –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
        return

    await state.update_data(description=message.text)
    await state.set_state(TicketCreation.waiting_for_evidence)
    
    await message.answer(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–∞–π–ª (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'):",
        reply_markup=get_done_keyboard()
    )

@router.message(TicketCreation.waiting_for_evidence)
async def process_evidence(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤"""
    if message.chat.id == SUPPORT_GROUP_ID:
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(TicketCreation.waiting_for_description)
        await message.answer(
            "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:",
            reply_markup=get_back_keyboard()
        )
        return

    file_id = None
    file_type = None
    file_name = None
    if message.photo:
        file_id = message.photo[-1].file_id
        file_type = 'photo'
    elif message.document:
        file_id = message.document.file_id
        file_type = 'document'
        file_name = message.document.file_name
    elif message.video:
        file_id = message.video.file_id
        file_type = 'video'
        file_name = getattr(message.video, 'file_name', None)

    if file_id and file_type:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ state
        files = (await state.get_data()).get('files', [])
        files.append({'file_id': file_id, 'file_type': file_type, 'file_name': file_name})
        await state.update_data(files=files)
        await message.answer(
            "üìé –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ':",
            reply_markup=get_done_keyboard()
        )
    else:
        await message.answer(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –≤–∏–¥–µ–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
            reply_markup=get_done_keyboard()
        )

def get_user_ticket_keyboard(ticket_id: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –í–æ–π—Ç–∏ –≤ —á–∞—Ç —Ç–∏–∫–µ—Ç–∞", callback_data=f"user_chat_{ticket_id}")]
        ]
    )

@router.callback_query(lambda c: c.data == 'evidence_done')
async def finish_ticket_creation(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞")
    await callback.answer()

    data = await state.get_data()

    if not data.get('description'):
        await callback.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!", show_alert=True)
        return
    if not data.get('nickname'):
        await callback.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!", show_alert=True)
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç –≤ –ë–î
    async with aiosqlite.connect('tickets.db') as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('''
            INSERT INTO tickets (user_id, nickname, category, priority, description, status, created_at)
            VALUES (?, ?, ?, ?, ?, ?, datetime('now'))
        ''', (
            callback.from_user.id,
            data.get('nickname', callback.from_user.username or callback.from_user.first_name),
            data.get('category', '–î—Ä—É–≥–æ–µ'),
            data.get('priority', '–°—Ä–µ–¥–Ω–∏–π'),
            data.get('description'),
            'open'
        ))
        await db.commit()
        ticket_id = cursor.lastrowid

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ state –≤ ticket_files
        files = data.get('files', [])
        for f in files:
            await db.execute('''
                INSERT INTO ticket_files (ticket_id, file_id, file_type, file_name)
                VALUES (?, ?, ?, ?)
            ''', (ticket_id, f['file_id'], f['file_type'], f['file_name']))
        await db.commit()

    # –°–æ–∑–¥–∞—ë–º —Ç–µ–º—É –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    print(f"üîç DEBUG: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{ticket_id}")
    print(f"   üìã –ì—Ä—É–ø–ø–∞: {SUPPORT_GROUP_ID}")
    print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data.get('nickname', callback.from_user.username or callback.from_user.first_name)}")
    
    try:
        topic = await callback.bot.create_forum_topic(
            chat_id=SUPPORT_GROUP_ID,
            name=f"–¢–∏–∫–µ—Ç #{ticket_id}: {data.get('nickname', callback.from_user.username or callback.from_user.first_name)}"
        )
        message_thread_id = topic.message_thread_id
        print(f"   ‚úÖ –¢–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å thread_id: {message_thread_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ticket_id <-> message_thread_id
        async with aiosqlite.connect('tickets.db') as db:
            await db.execute('INSERT INTO ticket_threads (ticket_id, message_thread_id) VALUES (?, ?)', (ticket_id, message_thread_id))
            await db.commit()
            print(f"   üíæ –°–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ç–µ–º—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text='üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', callback_data='topic_quick_greeting'),
                InlineKeyboardButton(text='‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ', callback_data='topic_quick_wait')
            ],
            [
                InlineKeyboardButton(text='‚úÖ –†–µ—à–µ–Ω–æ', callback_data='topic_quick_solved'),
                InlineKeyboardButton(text='üîÑ –ü–µ—Ä–µ–¥–∞—Ç—å', callback_data='topic_quick_escalate')
            ],
            [
                InlineKeyboardButton(text='‚ÑπÔ∏è –ò–Ω—Ñ–æ', callback_data='topic_quick_info'),
                InlineKeyboardButton(text='üîí –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç', callback_data='topic_close_ticket')
            ]
        ])
        
        await callback.bot.send_message(
            SUPPORT_GROUP_ID,
            f"üÜï –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket_id}\n\n"
            f"üë§ –û—Ç: {data.get('nickname', callback.from_user.username or callback.from_user.first_name)}\n"
            f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–î—Ä—É–≥–æ–µ')}\n"
            f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {data.get('priority', '–°—Ä–µ–¥–Ω–∏–π')}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
            f"üîß –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            message_thread_id=message_thread_id,
            reply_markup=keyboard
        )
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Ç–∏–∫–µ—Ç–∞ –≤ —Ç–µ–º—É
        files = data.get('files', [])
        for idx, f in enumerate(files, 1):
            caption = f"üìé –§–∞–π–ª –æ—Ç –∏–≥—Ä–æ–∫–∞"
            if f.get('file_name'):
                caption += f" ({f['file_name']})"
            caption += f" [{idx}/{len(files)}]"
            try:
                if f['file_type'] == 'photo':
                    await callback.bot.send_photo(SUPPORT_GROUP_ID, f['file_id'], caption=caption, message_thread_id=message_thread_id)
                elif f['file_type'] == 'video':
                    await callback.bot.send_video(SUPPORT_GROUP_ID, f['file_id'], caption=caption, message_thread_id=message_thread_id)
                elif f['file_type'] == 'document':
                    await callback.bot.send_document(SUPPORT_GROUP_ID, f['file_id'], caption=caption, message_thread_id=message_thread_id)
                else:
                    await callback.bot.send_message(SUPPORT_GROUP_ID, f"{caption}: <code>{f['file_id']}</code>", message_thread_id=message_thread_id, parse_mode="HTML")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ —Ç–µ–º—É —Ç–∏–∫–µ—Ç–∞: {e}")
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ç–µ–º–∞ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{ticket_id} —Å thread_id {message_thread_id}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä—É–º-—Ç–µ–º—ã –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{ticket_id}: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã
        message_thread_id = None

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    from handlers.admin import notify_admins_new_ticket
    await notify_admins_new_ticket(ticket_id, data, callback.from_user)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —á–∞—Ç–∞
    user_id = callback.from_user.id
    is_admin = user_id in ADMIN_IDS

    await callback.message.edit_text(
        f"‚úÖ –¢–∏–∫–µ—Ç #{ticket_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–î—Ä—É–≥–æ–µ')}\n"
        f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {data.get('priority', '–°—Ä–µ–¥–Ω–∏–π')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}\n\n"
        "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    )

    # –°—Ä–∞–∑—É –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ —Ç–∏–∫–µ—Ç—É
    await state.set_state(UserChat.chatting_with_admin)
    await state.update_data(ticket_id=ticket_id, message_thread_id=message_thread_id)
    if message_thread_id:
        await callback.message.answer(
            f"‚úâÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç #{ticket_id}. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª:",
            reply_markup=get_chat_back_keyboard()
        )
    else:
        await callback.message.answer(
            f"‚úâÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç #{ticket_id}. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª:\n\n‚ö†Ô∏è <i>–¢–µ–º–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –æ–±—â–∏–π —á–∞—Ç –≥—Ä—É–ø–ø—ã</i>",
            reply_markup=get_chat_back_keyboard(),
            parse_mode="HTML"
        )

    if is_admin:
        from keyboards import get_admin_keyboard
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_admin_keyboard())

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    user_id = message.from_user.id
    is_admin = user_id in ADMIN_IDS
    
    async with aiosqlite.connect('tickets.db') as db:
        db.row_factory = aiosqlite.Row
        
        if is_admin:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
            cursor = await db.execute('''
                SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN status = 'open' THEN 1 ELSE 0 END) as open_count,
                    SUM(CASE WHEN status = 'in_progress' THEN 1 ELSE 0 END) as in_progress_count,
                    SUM(CASE WHEN status = 'closed' THEN 1 ELSE 0 END) as closed_count
                FROM tickets
            ''')
            stats = await cursor.fetchone()
            
            stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤:\n\n"
            stats_text += f"üìã –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {stats['total']}\n"
            stats_text += f"üÜï –û—Ç–∫—Ä—ã—Ç—ã—Ö: {stats['open_count']}\n"
            stats_text += f"üõ†Ô∏è –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress_count']}\n"
            stats_text += f"‚úÖ –ó–∞–∫—Ä—ã—Ç—ã—Ö: {stats['closed_count']}\n"
        else:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor = await db.execute('''
                SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN status = 'open' THEN 1 ELSE 0 END) as open_count,
                    SUM(CASE WHEN status = 'in_progress' THEN 1 ELSE 0 END) as in_progress_count,
                    SUM(CASE WHEN status = 'closed' THEN 1 ELSE 0 END) as closed_count
                FROM tickets WHERE user_id = ?
            ''', (user_id,))
            stats = await cursor.fetchone()
            
            stats_text = f"üìä –í–∞—à–∏ —Ç–∏–∫–µ—Ç—ã:\n\n"
            stats_text += f"üìã –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {stats['total']}\n"
            stats_text += f"üÜï –û—Ç–∫—Ä—ã—Ç—ã—Ö: {stats['open_count']}\n"
            stats_text += f"üõ†Ô∏è –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress_count']}\n"
            stats_text += f"‚úÖ –ó–∞–∫—Ä—ã—Ç—ã—Ö: {stats['closed_count']}\n"
    
    await message.answer(stats_text)

@router.callback_query(lambda c: c.data.startswith('user_chat_'))
async def start_user_chat(callback: CallbackQuery, state: FSMContext):
    ticket_id = int(callback.data.split('_')[2])
    # –ü–æ–ª—É—á–∏—Ç—å message_thread_id
    async with aiosqlite.connect('tickets.db') as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('SELECT message_thread_id FROM ticket_threads WHERE ticket_id = ?', (ticket_id,))
        row = await cursor.fetchone()
    
    message_thread_id = row['message_thread_id'] if row else None
    
    await state.set_state(UserChat.chatting_with_admin)
    await state.update_data(ticket_id=ticket_id, message_thread_id=message_thread_id)
    
    if message_thread_id:
        await callback.message.edit_text(
            f"‚úâÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç #{ticket_id}. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª:",
            reply_markup=get_chat_back_keyboard()
        )
    else:
        await callback.message.edit_text(
            f"‚úâÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç #{ticket_id}. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª:\n\n‚ö†Ô∏è <i>–¢–µ–º–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –æ–±—â–∏–π —á–∞—Ç –≥—Ä—É–ø–ø—ã</i>",
            reply_markup=get_chat_back_keyboard(),
            parse_mode="HTML"
        )
    
    await callback.answer()

@router.message(UserChat.chatting_with_admin)
async def relay_user_to_admin(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–æ—Ç–∞ –≤ —Ç–µ–º—É –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    from config import SUPPORT_GROUP_ID
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üîô –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞", reply_markup=get_user_keyboard())
        return

    data = await state.get_data()
    ticket_id = data.get('ticket_id')
    thread_id = data.get('message_thread_id')

    if not ticket_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ç–∏–∫–µ—Ç–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
    async with aiosqlite.connect('tickets.db') as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('SELECT status FROM tickets WHERE id = ?', (ticket_id,))
        row = await cursor.fetchone()
    if row is None:
        await state.clear()
        await message.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É —Ç–∏–∫–µ—Ç—É.", reply_markup=get_user_keyboard())
        return
    if row['status'] == 'closed':
        await state.clear()
        await message.answer("‚ùå –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç. –í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É —Ç–∏–∫–µ—Ç—É.", reply_markup=get_user_keyboard())
        return
    
    # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    if not thread_id:
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–µ–∫—Å—Ç/—Ñ–∞–π–ª –≤ –≥—Ä—É–ø–ø—É –±–µ–∑ —Ç–µ–º—ã
            if message.text:
                await message.bot.send_message(SUPPORT_GROUP_ID, f"üë§ –ò–≥—Ä–æ–∫ (—Ç–∏–∫–µ—Ç #{ticket_id}): {message.text}")
                message_text = message.text
            elif message.photo:
                caption = f"üë§ –ò–≥—Ä–æ–∫ (—Ç–∏–∫–µ—Ç #{ticket_id}): {message.caption}" if message.caption else f"üë§ –ò–≥—Ä–æ–∫ (—Ç–∏–∫–µ—Ç #{ticket_id}): [–§–æ—Ç–æ]"
                await message.bot.send_photo(SUPPORT_GROUP_ID, message.photo[-1].file_id, caption=caption)
                message_text = message.caption or "[–§–æ—Ç–æ]"
            elif message.document:
                caption = f"üë§ –ò–≥—Ä–æ–∫ (—Ç–∏–∫–µ—Ç #{ticket_id}): {message.caption}" if message.caption else f"üë§ –ò–≥—Ä–æ–∫ (—Ç–∏–∫–µ—Ç #{ticket_id}): [–î–æ–∫—É–º–µ–Ω—Ç]"
                await message.bot.send_document(SUPPORT_GROUP_ID, message.document.file_id, caption=caption)
                message_text = message.caption or f"[–î–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name}]"
            elif message.video:
                caption = f"üë§ –ò–≥—Ä–æ–∫ (—Ç–∏–∫–µ—Ç #{ticket_id}): {message.caption}" if message.caption else f"üë§ –ò–≥—Ä–æ–∫ (—Ç–∏–∫–µ—Ç #{ticket_id}): [–í–∏–¥–µ–æ]"
                await message.bot.send_video(SUPPORT_GROUP_ID, message.video.file_id, caption=caption)
                message_text = message.caption or "[–í–∏–¥–µ–æ]"
            else:
                await message.bot.send_message(SUPPORT_GROUP_ID, f"üë§ –ò–≥—Ä–æ–∫ (—Ç–∏–∫–µ—Ç #{ticket_id}): [–°–æ–æ–±—â–µ–Ω–∏–µ]")
                message_text = "[–°–æ–æ–±—â–µ–Ω–∏–µ]"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            async with aiosqlite.connect('tickets.db') as db:
                await db.execute(
                    "INSERT INTO ticket_messages (ticket_id, user_id, message_text, is_admin) VALUES (?, ?, ?, ?)",
                    (ticket_id, message.from_user.id, message_text, False)
                )
                await db.commit()
            
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (–±–µ–∑ —Ç–µ–º—ã)")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É
    try:
        if message.text:
            await message.bot.send_message(SUPPORT_GROUP_ID, f"üë§ –ò–≥—Ä–æ–∫: {message.text}", message_thread_id=thread_id)
            message_text = message.text
        elif message.photo:
            caption = f"üë§ –ò–≥—Ä–æ–∫: {message.caption}" if message.caption else "üë§ –ò–≥—Ä–æ–∫: [–§–æ—Ç–æ]"
            await message.bot.send_photo(SUPPORT_GROUP_ID, message.photo[-1].file_id, caption=caption, message_thread_id=thread_id)
            message_text = message.caption or "[–§–æ—Ç–æ]"
        elif message.document:
            caption = f"üë§ –ò–≥—Ä–æ–∫: {message.caption}" if message.caption else "üë§ –ò–≥—Ä–æ–∫: [–î–æ–∫—É–º–µ–Ω—Ç]"
            await message.bot.send_document(SUPPORT_GROUP_ID, message.document.file_id, caption=caption, message_thread_id=thread_id)
            message_text = message.caption or f"[–î–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name}]"
        elif message.video:
            caption = f"üë§ –ò–≥—Ä–æ–∫: {message.caption}" if message.caption else "üë§ –ò–≥—Ä–æ–∫: [–í–∏–¥–µ–æ]"
            await message.bot.send_video(SUPPORT_GROUP_ID, message.video.file_id, caption=caption, message_thread_id=thread_id)
            message_text = message.caption or "[–í–∏–¥–µ–æ]"
        else:
            await message.bot.send_message(SUPPORT_GROUP_ID, "üë§ –ò–≥—Ä–æ–∫: [–°–æ–æ–±—â–µ–Ω–∏–µ]", message_thread_id=thread_id)
            message_text = "[–°–æ–æ–±—â–µ–Ω–∏–µ]"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect('tickets.db') as db:
            await db.execute(
                "INSERT INTO ticket_messages (ticket_id, user_id, message_text, is_admin) VALUES (?, ?, ?, ?)",
                (ticket_id, message.from_user.id, message_text, False)
            )
            await db.commit()
        
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–º—É: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

@router.callback_query(lambda c: c.data == 'back_to_main')
async def back_to_main_from_chat(callback: CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞ –ø–æ inline –∫–Ω–æ–ø–∫–µ"""
    await state.clear()
    await callback.message.edit_text(
        "üîô –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞",
        reply_markup=get_user_keyboard()
    )
    await callback.answer()

async def create_ticket_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞")
    await state.set_state(TicketCreation.waiting_for_category)
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–∏–∫–µ—Ç–∞:",
        reply_markup=get_category_keyboard()
    ) 