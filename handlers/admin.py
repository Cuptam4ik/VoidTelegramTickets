from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
import aiosqlite
import logging
from config import ADMIN_IDS, LOG_CHANNEL_ID, SUPPORT_GROUP_ID
from keyboards import get_admin_keyboard, get_ticket_actions_keyboard, get_quick_replies_keyboard, get_admin_panel_keyboard

router = Router()
logger = logging.getLogger(__name__)

class AdminChat(StatesGroup):
    chatting_with_user = State()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–æ–≤
admin_active_chats = {}

@router.message(F.text == "üìã –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if message.chat.id == SUPPORT_GROUP_ID:
        return
    """–ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    if message.from_user.id not in ADMIN_IDS:
        return
    async with aiosqlite.connect('tickets.db') as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('SELECT * FROM tickets ORDER BY status DESC, created_at ASC')
        tickets = await cursor.fetchall()
    if not tickets:
        await message.answer("üîç –ù–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    for ticket in tickets:
        if ticket['status'] == 'closed':
            continue
        text = (
            f"<b>üóÇÔ∏è –¢–∏–∫–µ—Ç #{ticket['id']}</b>\n"
            f"üë§ –ò–≥—Ä–æ–∫: <b>{ticket['nickname']}</b>\n"
            f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {get_category_icon(ticket['category'])} {get_category_name(ticket['category'])}\n"
            f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {get_priority_icon(ticket['priority'])} {get_priority_name(ticket['priority'])}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {ticket['description']}\n"
            f"{get_status_icon(ticket['status'])} –°—Ç–∞—Ç—É—Å: {get_status_name(ticket['status'])}"
        )
        keyboard = get_ticket_actions_keyboard(ticket['id'], ticket['status'])
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∫–æ–Ω–æ–∫ –∏ –Ω–∞–∑–≤–∞–Ω–∏–π

def get_category_icon(category: str) -> str:
    return {
        'cat_tech': 'üîß',
        'cat_report': 'üö®',
        'cat_payment': 'üí≥',
        'cat_other': '‚ùì',
    }.get(category, '‚ùì')

def get_category_name(category: str) -> str:
    return {
        'cat_tech': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
        'cat_report': '–ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞',
        'cat_payment': '–í–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ',
        'cat_other': '–î—Ä—É–≥–æ–µ',
    }.get(category, '–î—Ä—É–≥–æ–µ')

def get_priority_icon(priority: str) -> str:
    return {
        'low': 'üü¢',
        'medium': 'üü°',
        'high': 'üî¥',
        '–ù–∏–∑–∫–∏–π': 'üü¢',
        '–°—Ä–µ–¥–Ω–∏–π': 'üü°',
        '–í—ã—Å–æ–∫–∏–π': 'üî¥',
    }.get(priority, '‚ö™')

def get_priority_name(priority: str) -> str:
    return {
        'low': '–ù–∏–∑–∫–∏–π',
        'medium': '–°—Ä–µ–¥–Ω–∏–π',
        'high': '–í—ã—Å–æ–∫–∏–π',
    }.get(priority, priority)

def get_status_icon(status: str) -> str:
    return {
        'open': 'üü¢',
        'in_progress': 'üü°',
        'closed': 'üîí',
    }.get(status, '‚ö™')

def get_status_name(status: str) -> str:
    return {
        'open': '–û—Ç–∫—Ä—ã—Ç',
        'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
        'closed': '–ó–∞–∫—Ä—ã—Ç',
    }.get(status, status)

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_statistics(message: Message):
    if message.chat.id == SUPPORT_GROUP_ID:
        return
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    if message.from_user.id not in ADMIN_IDS:
        return
    
    async with aiosqlite.connect('tickets.db') as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('''
            SELECT 
                COUNT(*) as total,
                SUM(CASE WHEN status = 'open' THEN 1 ELSE 0 END) as open_count,
                SUM(CASE WHEN status = 'in_progress' THEN 1 ELSE 0 END) as in_progress_count,
                SUM(CASE WHEN status = 'closed' THEN 1 ELSE 0 END) as closed_count
            FROM tickets
        ''')
        stats = await cursor.fetchone()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        cursor = await db.execute('''
            SELECT category, COUNT(*) as count 
            FROM tickets 
            GROUP BY category
        ''')
        categories = await cursor.fetchall()
        
        stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤:\n\n"
        stats_text += f"üìã –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {stats['total']}\n"
        stats_text += f"üÜï –û—Ç–∫—Ä—ã—Ç—ã—Ö: {stats['open_count']}\n"
        stats_text += f"üõ†Ô∏è –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress_count']}\n"
        stats_text += f"‚úÖ –ó–∞–∫—Ä—ã—Ç—ã—Ö: {stats['closed_count']}\n\n"
        stats_text += "üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        
        for cat in categories:
            stats_text += f"‚Ä¢ {cat['category']}: {cat['count']}\n"
    
    await message.answer(stats_text)

async def notify_admins_new_ticket(ticket_id: int, ticket_data: dict, user):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ"""
    notification = f"üÜï –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket_id}\n\n"
    notification += f"üë§ –û—Ç: {user.username or user.first_name}\n"
    notification += f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ticket_data.get('category', '–î—Ä—É–≥–æ–µ')}\n"
    notification += f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {ticket_data.get('priority', '–°—Ä–µ–¥–Ω–∏–π')}\n"
    notification += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {ticket_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
    
    for admin_id in ADMIN_IDS:
        try:
            await user.bot.send_message(admin_id, notification)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

@router.message()
async def relay_admin_to_user(message: Message):
    # –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ SUPPORT_GROUP_ID –∏ –∏–∑ —Ç–µ–º—ã (—Ç–æ–ø–∏–∫–∞) –∏ –Ω–µ –æ—Ç –±–æ—Ç–∞
    if message.chat.id != SUPPORT_GROUP_ID:
        return
    if not getattr(message, 'message_thread_id', None):
        return
    if message.from_user.is_bot:
        return
    # –ü–æ–ª—É—á–∏—Ç—å ticket_id –ø–æ message_thread_id
    async with aiosqlite.connect('tickets.db') as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('SELECT ticket_id FROM ticket_threads WHERE message_thread_id = ?', (message.message_thread_id,))
        row = await cursor.fetchone()
    
    if not row:
        return
    
    ticket_id = row['ticket_id']
    
    # –ü–æ–ª—É—á–∏—Ç—å user_id –ø–æ ticket_id
    async with aiosqlite.connect('tickets.db') as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('SELECT user_id FROM tickets WHERE id = ?', (ticket_id,))
        ticket = await cursor.fetchone()
    
    if not ticket:
        return
    
    user_id = ticket['user_id']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
    if message.from_user.id not in ADMIN_IDS:
        return
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        if message.text:
            await message.bot.send_message(user_id, f"üí¨ –ê–¥–º–∏–Ω: {message.text}")
            message_text = message.text
        elif message.photo:
            caption = f"üí¨ –ê–¥–º–∏–Ω: {message.caption}" if message.caption else "üí¨ –ê–¥–º–∏–Ω: [–§–æ—Ç–æ]"
            await message.bot.send_photo(user_id, message.photo[-1].file_id, caption=caption)
            message_text = message.caption or "[–§–æ—Ç–æ]"
        elif message.document:
            caption = f"üí¨ –ê–¥–º–∏–Ω: {message.caption}" if message.caption else "üí¨ –ê–¥–º–∏–Ω: [–î–æ–∫—É–º–µ–Ω—Ç]"
            await message.bot.send_document(user_id, message.document.file_id, caption=caption)
            message_text = message.caption or f"[–î–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name}]"
        elif message.video:
            caption = f"üí¨ –ê–¥–º–∏–Ω: {message.caption}" if message.caption else "üí¨ –ê–¥–º–∏–Ω: [–í–∏–¥–µ–æ]"
            await message.bot.send_video(user_id, message.video.file_id, caption=caption)
            message_text = message.caption or "[–í–∏–¥–µ–æ]"
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            await message.bot.send_message(user_id, "üí¨ –ê–¥–º–∏–Ω: [–°–æ–æ–±—â–µ–Ω–∏–µ]")
            message_text = "[–°–æ–æ–±—â–µ–Ω–∏–µ]"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect('tickets.db') as db:
            await db.execute(
                "INSERT INTO ticket_messages (ticket_id, user_id, message_text, is_admin) VALUES (?, ?, ?, ?)",
                (ticket_id, message.from_user.id, message_text, True)
            )
            await db.commit()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± –æ—à–∏–±–∫–µ
        try:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        except:
            pass

@router.message(Command("check_group_status"))
async def check_group_status(message: Message):
    if message.chat.id == SUPPORT_GROUP_ID:
        return
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ check_group_status –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–ø–ø—ã")
    
    if message.from_user.id not in ADMIN_IDS:
        print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤")
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        chat = await message.bot.get_chat(SUPPORT_GROUP_ID)
        
        status_text = f"üìã <b>–°—Ç–∞—Ç—É—Å –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        status_text += f"üÜî ID –≥—Ä—É–ø–ø—ã: <code>{SUPPORT_GROUP_ID}</code>\n"
        status_text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
        status_text += f"üë• –¢–∏–ø: {chat.type}\n"
        status_text += f"üîó –°—Å—ã–ª–∫–∞: {chat.invite_link or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä—É–ø–ø–æ–π
        if hasattr(chat, 'is_forum'):
            status_text += f"üèõÔ∏è –§–æ—Ä—É–º: {'‚úÖ –î–∞' if chat.is_forum else '‚ùå –ù–µ—Ç'}\n"
        else:
            status_text += f"üèõÔ∏è –§–æ—Ä—É–º: ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è aiogram)\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
        if chat.type == 'supergroup':
            status_text += f"üöÄ –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞: ‚úÖ –î–∞\n"
        else:
            status_text += f"üöÄ –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞: ‚ùå –ù–µ—Ç\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
        try:
            bot_member = await message.bot.get_chat_member(SUPPORT_GROUP_ID, message.bot.id)
            status_text += f"ü§ñ –ü—Ä–∞–≤–∞ –±–æ—Ç–∞: {bot_member.status}\n"
            
            if hasattr(bot_member, 'can_post_messages'):
                status_text += f"üìù –ú–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {'‚úÖ –î–∞' if bot_member.can_post_messages else '‚ùå –ù–µ—Ç'}\n"
            if hasattr(bot_member, 'can_manage_topics'):
                status_text += f"üèõÔ∏è –ú–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–º–∞–º–∏: {'‚úÖ –î–∞' if bot_member.can_manage_topics else '‚ùå –ù–µ—Ç'}\n"
        except Exception as e:
            status_text += f"ü§ñ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞: {e}\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        status_text += "\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        
        if chat.type != 'supergroup':
            status_text += "‚Ä¢ –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –≥—Ä—É–ø–ø—É –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É\n"
        
        if not getattr(chat, 'is_forum', False):
            status_text += "‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ —Ç–µ–º—ã (—Ñ–æ—Ä—É–º—ã) –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≥—Ä—É–ø–ø—ã\n"
        
        if chat.type == 'supergroup' and getattr(chat, 'is_forum', False):
            status_text += "‚úÖ –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º!\n"
        
        print(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
        await message.answer(status_text, parse_mode="HTML")
        
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã: {e}")
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã:\n{str(e)}\n\n"
        error_text += f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
        error_text += f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å SUPPORT_GROUP_ID –≤ config.py\n"
        error_text += f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω –ª–∏ –±–æ—Ç –≤ –≥—Ä—É–ø–ø—É\n"
        error_text += f"‚Ä¢ –ï—Å—Ç—å –ª–∏ —É –±–æ—Ç–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
        await message.answer(error_text)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–ø–ø—ã: {e}")

# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ–º–∞—Ö

@router.callback_query(lambda c: c.data.startswith('topic_quick_'))
async def topic_quick_reply(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Ç–µ–º–∞—Ö"""
    if callback.message.chat.id != SUPPORT_GROUP_ID:
        return
    
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    
    # –ü–æ–ª—É—á–∏—Ç—å ticket_id –ø–æ message_thread_id
    async with aiosqlite.connect('tickets.db') as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('SELECT ticket_id FROM ticket_threads WHERE message_thread_id = ?', (callback.message.message_thread_id,))
        row = await cursor.fetchone()
    
    if not row:
        await callback.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    ticket_id = row['ticket_id']
    
    # –ü–æ–ª—É—á–∏—Ç—å user_id –ø–æ ticket_id
    async with aiosqlite.connect('tickets.db') as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('SELECT user_id FROM tickets WHERE id = ?', (ticket_id,))
        ticket = await cursor.fetchone()
    
    if not ticket:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    user_id = ticket['user_id']
    
    quick_replies = {
        'topic_quick_greeting': 'üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à —Ç–∏–∫–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
        'topic_quick_wait': '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã.',
        'topic_quick_solved': '‚úÖ –í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç.',
        'topic_quick_closed': 'üîí –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç.',
        'topic_quick_escalate': 'üîÑ –í–∞—à —Ç–∏–∫–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –¥—Ä—É–≥–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.',
        'topic_quick_info': '‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.'
    }
    
    reply_text = quick_replies.get(callback.data, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.bot.send_message(user_id, f"üí¨ –ê–¥–º–∏–Ω (—Ç–∏–∫–µ—Ç #{ticket_id}):\n\n{reply_text}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É
        await callback.bot.send_message(
            SUPPORT_GROUP_ID,
            f"üí¨ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:\n\n{reply_text}",
            message_thread_id=callback.message.message_thread_id
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        async with aiosqlite.connect('tickets.db') as db:
            await db.execute(
                "INSERT INTO ticket_messages (ticket_id, user_id, message_text, is_admin) VALUES (?, ?, ?, ?)",
                (ticket_id, callback.from_user.id, reply_text, True)
            )
            await db.commit()
        
        await callback.answer("‚úÖ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}", show_alert=True)
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ–º–µ: {e}")

@router.callback_query(lambda c: c.data.startswith('topic_close_'))
async def topic_close_ticket(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞ –∏–∑ —Ç–µ–º—ã"""
    if callback.message.chat.id != SUPPORT_GROUP_ID:
        return
    
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    
    # –ü–æ–ª—É—á–∏—Ç—å ticket_id –ø–æ message_thread_id
    async with aiosqlite.connect('tickets.db') as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('SELECT ticket_id FROM ticket_threads WHERE message_thread_id = ?', (callback.message.message_thread_id,))
        row = await cursor.fetchone()
    
    if not row:
        await callback.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    ticket_id = row['ticket_id']
    
    async with aiosqlite.connect('tickets.db') as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('''
            UPDATE tickets SET status = 'closed' WHERE id = ?
        ''', (ticket_id,))
        await db.commit()
        
        if cursor.rowcount == 0:
            await callback.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
        cursor = await db.execute('SELECT * FROM tickets WHERE id = ?', (ticket_id,))
        ticket = await cursor.fetchone()

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–∫–µ—Ç–∞
        cursor = await db.execute('SELECT * FROM ticket_messages WHERE ticket_id = ? ORDER BY created_at ASC', (ticket_id,))
        messages = await cursor.fetchall()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª
    if messages:
        history = f"üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–∞ #{ticket_id} (–∑–∞–∫—Ä—ã—Ç):\n\n"
        for msg in messages:
            who = "–ê–¥–º–∏–Ω" if msg['is_admin'] else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            history += f"[{who}] {msg['message_text']}\n"
        try:
            await callback.bot.send_message(LOG_CHANNEL_ID, history)
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–∞ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª: {e}')

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.bot.send_message(
            ticket['user_id'],
            f"üîí –í–∞—à —Ç–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.first_name}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
    await callback.bot.send_message(
        SUPPORT_GROUP_ID,
        f"üîí –¢–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.first_name}",
        message_thread_id=callback.message.message_thread_id
    )
    
    await callback.answer("‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")

@router.callback_query(lambda c: c.data.startswith('topic_actions_'))
async def topic_show_actions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ç–µ–º–µ"""
    if callback.message.chat.id != SUPPORT_GROUP_ID:
        return
    
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è —Ç–µ–º—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', callback_data='topic_quick_greeting'),
            InlineKeyboardButton(text='‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ', callback_data='topic_quick_wait')
        ],
        [
            InlineKeyboardButton(text='‚úÖ –†–µ—à–µ–Ω–æ', callback_data='topic_quick_solved'),
            InlineKeyboardButton(text='üîÑ –ü–µ—Ä–µ–¥–∞—Ç—å', callback_data='topic_quick_escalate')
        ],
        [
            InlineKeyboardButton(text='‚ÑπÔ∏è –ò–Ω—Ñ–æ', callback_data='topic_quick_info'),
            InlineKeyboardButton(text='üîí –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç', callback_data='topic_close_ticket')
        ]
    ])
    
    await callback.message.edit_text(
        "üîß –î–µ–π—Å—Ç–≤–∏—è —Å —Ç–∏–∫–µ—Ç–æ–º:",
        reply_markup=keyboard
    ) 